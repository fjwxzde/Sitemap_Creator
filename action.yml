name: Sitemap Creator Pre-Release
description: GitHub Action 🚀 for creating and updating sitemaps in your repository.
author: 鸭鸭「カモ」(@DuckDuckStudio)
color: yellow
icon: book

inputs:
  location:
    required: false
    description: 网站地图的存放位置 (例如 docs/sitemap.xml)
    default: "./sitemap.xml"

  token:
    required: false
    description: 用于创建更新网站地图的拉取请求的 Token (不指定则使用 github.token)
    default: ${{ github.token }}

  timezone:
    required: false
    description: 设置生成时使用的时区 (不指定则使用 Asia/Shanghai (UTF+8))
    default: "Asia/Shanghai"

  basic_link:
    required: false
    description: 指向你网站的基础链接 (不指定则使用 GitHub Page 链接, 结尾不要带 / )
    default: https://${{ github.event.repository.owner.login }}.github.io/${{ github.event.repository.name }}

  file_type:
    required: false
    description: 网页文件的类型 (例如使用 docsify 部署的就是 md，不指定则设为 html，可指定多个类型)
    default: "html,md"

  ignore_file:
    required: false
    description: 指定哪些文件不包含在网站地图中
    default: "啥都没有" # 应该不会有人要这个，留空会忽略所有文件

  website_path:
    required: true
    description: 你的网站内容的位置 (例如 . (根目录) 或 docs)
    default: "./"

  base_branch:
    required: false
    description: 仓库主分支 (main，master 等)
    default: main

  debug:
    required: false
    description: 控制调试输出的开关
    default: false

  labels:
    required: false
    description: 创建拉取请求时添加的标签

  auto_merge:
    required: false
    description: 设置启用自动合并的类型 (不指定则不启用自动合并，可以使用 merge、rebase、squash)

runs:
  using: composite
  steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 检出完整记录

    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: 设置时区
      shell: bash
      run: sudo timedatectl set-timezone ${{ inputs.timezone }}

    - name: 创建 Sitemap
      shell: bash
      env:
        LOCATION: ${{ inputs.location }}
        BASIC_LINK: ${{ inputs.basic_link }}
        FILE_TYPE: ${{ inputs.file_type }}
        IGNORE_FILE: ${{ inputs.ignore_file }}
        WEBSITE_PATH: ${{ inputs.website_path }}
        DEBUG: ${{ inputs.debug }}
      run: |
        # 获取生成脚本
        git clone https://github.com/fjwxzde/Sitemap_Creator -b Pre-Release # 预发行版
        cp Sitemap_Creator/generate-sitemap.mjs Sitemap_Creator.mjs
        rm -r Sitemap_Creator

        # 生成网站地图
        node Sitemap_Creator.mjs

    - name: 提交并推送 sitemap.xml
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        LABELS: ${{ inputs.labels }}
        DEBUG: ${{ inputs.debug }}
        AUTO_MERGE: ${{ inputs.auto_merge }}
      run: |
        # 参数处理
        # 获取当前日期和时间
        DATE_TIME=$(date '+%Y/%m/%d %H:%M')

        # 移除标签参数中的特殊字符
        CLEAN_LABELS=$(echo "$LABELS" | sed 's/[\"\'\`]*//g') # 移除 " ' ` 字符
        if [[ "$LABELS" != "$CLEAN_LABELS" ]]; then
          if [[ "$DEBUG" ]]; then
            echo "[DEBUG] 标签包含特殊字符，已移除: $LABELS -> $CLEAN_LABELS"
          fi
        fi

        # 如果 AUTO_MERGE 为空字符串，则不做任何操作
        if [[ -z "$AUTO_MERGE" ]]; then
          if [[ "$DEBUG" ]]; then
            echo "[DEBUG] 不启用自动合并，因为自动合并方式为空"
          fi
          CLEAN_AUTO_MERGE=""
        else
          # 格式化自动合并方式
          CLEAN_AUTO_MERGE=$(echo "$AUTO_MERGE" | tr '[:upper:]' '[:lower:]' | sed 's/[\"\'\`-]//g')  # 转为小写并移除 " ' ` -

          # 根据输入值设置对应的自动合并方式
          case "$CLEAN_AUTO_MERGE" in
            "s"|"squash"|"压缩"|"压缩合并"|"压缩自动合并")
              CLEAN_AUTO_MERGE="squash"
              ;;
            "m"|"merge"|"合并"|"合并提交"|"提交")
              CLEAN_AUTO_MERGE="merge"
              ;;
            "r"|"rebase"|"变基"|"变基合并"|"变基自动合并")
              CLEAN_AUTO_MERGE="rebase"
              ;;
            *)
              echo "[ERROR] 未知的自动合并方式: $AUTO_MERGE"
              echo "[TIP] 可用的自动合并方式: 压缩、合并、变基"
              exit 1
              ;;
          esac
        fi

        # 如果自动合并方式进行了格式化，输出调试信息
        if [[ "$AUTO_MERGE" != "$CLEAN_AUTO_MERGE" ]]; then
          if [[ "$DEBUG" ]]; then
            echo "[DEBUG] 已格式化自动合并方式: $AUTO_MERGE -> $CLEAN_AUTO_MERGE"
          fi
        fi

        # ================

        # 生成分支名
        BRANCH_NAME="sitemap-update-$(date +%Y%m%d%H%M%S)"
        git checkout -b $BRANCH_NAME
        echo "[INFO] 已创建新分支: $BRANCH_NAME"

        # 配置 Git 用户
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # 提交并推送 sitemap.xml
        git add docs/sitemap.xml
        git commit -m "[${DATE_TIME}] 自动更新网站地图"
        git push --set-upstream origin $BRANCH_NAME

        # 生成工作流 URL
        WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        # 创建拉取请求
        PR_URL=$(gh pr create --title "[${DATE_TIME}] 自动更新网站地图" \
                              --body "此拉取请求通过 [工作流](${WORKFLOW_URL}) 使用 [Sitemap Creator](https://github.com/DuckDuckStudio/Sitemap_Creator) 创建。" \
                              --base ${{ inputs.base_branch }} \
                              --head $BRANCH_NAME \
                              --json url -q ".url")

        echo "[INFO] 已创建拉取请求: $PR_URL"

        # 判断是否有清理后的标签并添加到 PR
        if [[ -n "$CLEAN_LABELS" ]]; then
          # 将标签按逗号分隔成数组
          LABEL_ARRAY=($(echo "$CLEAN_LABELS" | tr ',' '\n'))
          for LABEL in "${LABEL_ARRAY[@]}"; do
            # 为 PR 添加标签
            gh pr edit $PR_URL --add-label "$LABEL"
            if [[ "$DEBUG" ]]; then
              echo "[DEBUG] 为拉取请求添加标签: $LABEL"
            fi
          done
          echo "[INFO] 已为创建的拉取请求添加指定的标签"
        else
          if [[ "$DEBUG"" ]]; then
            echo "[DEBUG] 没有有效标签，跳过添加标签"
          fi
        fi

        # 判断是否启用自动合并
        # 如果 CLEAN_AUTO_MERGE 有值（即设置了自动合并方式），进行后续处理
        if [[ -n "$CLEAN_AUTO_MERGE" ]]; then
          gh pr merge $PR_URL --$CLEAN_AUTO_MERGE --auto
          echo "[INFO] 已为拉取请求启用 $CLEAN_AUTO_MERGE 合并"
        else
          if [[ "$DEBUG"" ]]; then
            echo "[DEBUG] 没有有效自动合并方式，跳过启用自动合并"
          fi
        fi
